/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.view;

import com.entity.PatientEntity;
import com.entity.PatientVitalEntity;
import com.entity.PrisonPatientEntity;
import com.entity.PrisonPatientVitalEntity;
import com.repositories.PatientRepository;
import com.repositories.PatientRepositoryPrison;
import com.repositories.PatientVitalRepository;
import com.repositories.PrisonPatientVitalRepository;
import com.util.MailUtils;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Controller;

 
@Controller(value = "DoctorPatientPanel")
public class DoctorPatientPanel extends javax.swing.JPanel {

    PrisonPatientVitalRepository prisonVitalRepository;
    PatientVitalRepository patientVitalRepository;
    PatientRepository patientRepository;
    PatientRepositoryPrison patientRepositoryPrison;

    /**
     * Creates new form DoctorPatientPanel
     */
    public DoctorPatientPanel(PatientRepositoryPrison patientRepositoryPrison,
            PatientRepository patientRepository,
            PatientVitalRepository patientVitalRepository,
            PrisonPatientVitalRepository prisonVitalRepository,
            ApplicationContext applicationContext) {
        this.patientRepositoryPrison = applicationContext.getBean(PatientRepositoryPrison.class);
        this.patientRepository = applicationContext.getBean(PatientRepository.class);
        this.patientVitalRepository = applicationContext.getBean(PatientVitalRepository.class);
        this.prisonVitalRepository = applicationContext.getBean(PrisonPatientVitalRepository.class);
        initComponents();
        loadPrisinoers();
        loadPatients();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblPrisinors = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPatient = new javax.swing.JTable();
        prisonerPatientAssignBtn = new javax.swing.JButton();
        patientAssignBtn = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtDrName = new javax.swing.JTextField();
        mainImage1 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblPrisinors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PATIENT ID", "NAME", "AGE", "BP", "WEIGHT", "PHQ-9 SCORE", "GAD-7 SCORE", "STATUS"
            }
        ));
        jScrollPane1.setViewportView(tblPrisinors);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 410, 1010, 220));

        tblPatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PATIENT ID", "NAME", "AGE", "BP", "WEIGHT", "PHQ-9 SCORE", "GAD-7 SCORE", "STATUS"
            }
        ));
        jScrollPane2.setViewportView(tblPatient);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 1010, 260));

        prisonerPatientAssignBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        prisonerPatientAssignBtn.setText("ASSIGN TO ME");
        prisonerPatientAssignBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prisonerPatientAssignBtnActionPerformed(evt);
            }
        });
        add(prisonerPatientAssignBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 640, 210, 50));

        patientAssignBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        patientAssignBtn.setText("ASSIGN TO ME");
        patientAssignBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientAssignBtnActionPerformed(evt);
            }
        });
        add(patientAssignBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 340, 210, 50));

        jButton3.setBackground(new java.awt.Color(255, 102, 0));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(51, 51, 51));
        jButton3.setText("RELOAD");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 640, -1, -1));

        jButton4.setBackground(new java.awt.Color(255, 102, 0));
        jButton4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(51, 51, 51));
        jButton4.setText("RELOAD");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 340, -1, -1));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("PRISON PATIENT TABLE");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 367, 180, 30));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("PATIENT TABLE");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 24, 180, 30));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("DOCTOR NAME :");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 20, 120, 40));

        txtDrName.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        add(txtDrName, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 20, 170, 40));

        mainImage1.setBackground(new java.awt.Color(41, 46, 64));
        mainImage1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        mainImage1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/META-INF/Mentally Healthy Communities .jpg"))); // NOI18N
        mainImage1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(170, 170, 170), 2));
        mainImage1.setMaximumSize(new java.awt.Dimension(728, 410));
        mainImage1.setMinimumSize(new java.awt.Dimension(728, 410));
        mainImage1.setOpaque(true);
        mainImage1.setPreferredSize(new java.awt.Dimension(728, 410));
        add(mainImage1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1050, 700));
    }// </editor-fold>//GEN-END:initComponents

    private void patientAssignBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientAssignBtnActionPerformed

        if (txtDrName.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please Enter your name");
        } else {
            DefaultTableModel model = (DefaultTableModel) tblPatient.getModel();
            if (model.getRowCount() != 0) {
                String id = model.getValueAt(tblPatient.getSelectedRow(), 0).toString();
                PatientEntity finddetailById = patientRepository.finddetailById(Integer.parseInt(id));
                if (null != finddetailById) {
                    finddetailById.setStatus("Doctor Assigned");
                    finddetailById.setDoctorId(txtDrName.getText());
                    patientRepository.save(finddetailById);
                    loadPrisinoers();
                    loadPatients();
                 JOptionPane.showMessageDialog(this, "Patient Assigned to Doctor"); 
                    // MailUtils.sendEmail(finddetailById.getEmail(), "Patient Registration Successfull!!", "Patient Registration Successfull");
                }
            }
        }    // TODO add your handling code here:
    }//GEN-LAST:event_patientAssignBtnActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        loadPrisinoers();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        loadPatients();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void prisonerPatientAssignBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prisonerPatientAssignBtnActionPerformed

        if (txtDrName.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please Enter your name");
        } else {
            DefaultTableModel model = (DefaultTableModel) tblPrisinors.getModel();
            if (model.getRowCount() != 0) {
                String id = model.getValueAt(tblPrisinors.getSelectedRow(), 0).toString();
                PrisonPatientEntity finddetailById = patientRepositoryPrison.finddetailById(Integer.parseInt(id));
                if (null != finddetailById) {
                    finddetailById.setStatus("Doctor Assigned");
                    finddetailById.setDoctorId(txtDrName.getText());
                    patientRepositoryPrison.save(finddetailById);
                    loadPrisinoers();
                    loadPatients();
                     JOptionPane.showMessageDialog(this, " Prisoner Patient Assigned to Doctor"); 
                }
            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_prisonerPatientAssignBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel mainImage1;
    private javax.swing.JButton patientAssignBtn;
    private javax.swing.JButton prisonerPatientAssignBtn;
    private javax.swing.JTable tblPatient;
    private javax.swing.JTable tblPrisinors;
    private javax.swing.JTextField txtDrName;
    // End of variables declaration//GEN-END:variables

    private void loadPrisinoers() {
        DefaultTableModel model = (DefaultTableModel) tblPrisinors.getModel();
       // model.setRowCount(0);
        List<PrisonPatientEntity> findAll = patientRepositoryPrison.findAll();
        for (PrisonPatientEntity entity : findAll) {
            if (entity.getStatus().equals("Sent to Doctor")) {
               // PrisonPatientVitalEntity finddetailById = prisonVitalRepository.finddetailById(Integer.toString(entity.getId()));
                 PrisonPatientVitalEntity finddetailById = prisonVitalRepository.finddetailById(entity.getPatientId());
                if (null != finddetailById) {
                    Object[] data = {entity.getId(),
                        entity.getName(), entity.getAge(),
                        finddetailById.getBp(),
                        finddetailById.getWeight(),
                        finddetailById.getPhq(),
                        finddetailById.getGad(),
                        entity.getStatus()};

                    model.addRow(data);
                }
            }

        }
    }

    private void loadPatients() {
            DefaultTableModel model = (DefaultTableModel) tblPatient.getModel();
        model.setRowCount(0);
        List<PatientEntity> findAll = patientRepository.findAll();
        for (PatientEntity entity : findAll) {
            if (entity.getStatus().equals("Sent to Doctor")) {
               // PatientVitalEntity finddetailById = patientVitalRepository.finddetailById(Integer.toString(entity.getId()));
                  PatientVitalEntity finddetailById = patientVitalRepository.finddetailById(entity.getId());
                if (null != finddetailById) {
                    Object[] data = {entity.getId(),
                        entity.getName(), entity.getAge(),
                        finddetailById.getBp(),
                        finddetailById.getWeight(),
                        finddetailById.getPhq(),
                        finddetailById.getGad(),
                        entity.getStatus()};

                    model.addRow(data);
                }
            }

        }
    }

}
